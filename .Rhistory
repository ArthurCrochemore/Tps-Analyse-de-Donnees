getwd()
# setwd(dir="D:/2Travail/annee 2019-2020/cours analyse des donnees/mes_tp/2tp_iris acp "); getwd()
data(iris)
data=iris
data
head(iris)
levels(iris$Species)
summary (iris$Species)
table(iris$Species)
#realisation d'une ACP sur les variables numeriques (quantitatives)
res.PCA = PCA(data[,1:4,], scale.unit = TRUE, ncp=4, graph=F)# on travaille avec les 4 variables
res.PCA# donne toutes les valeurs potentielles disponibles suite a la realisation de l'acp
# Obtenir l'inertie du premier plan factoriel
inertie_plan_factoriel <- get_eigenvalue(res.PCA)$eig[1]
# Afficher l'expression et la valeur de l'inertie du premier plan factoriel
print(paste("Inertie du premier plan factoriel:", inertie_plan_factoriel))
plot.PCA(
res.PCA,
axes=c(1, 2),
choix="var" ,
habillage="cos2"
)
library (ggplot2)
library (FactoMineR)
library (factoextra)
library (xlsx)
getwd() #affiche la localisation du répertoire de travail sous la forme d'un chemin absolu.
# setwd(dir="D:/2Travail/annee 2019-2020/cours analyse des donnees/mes_tp/2tp_iris acp "); getwd()
setwd(getwd())
data(iris)
write.xlsx(iris, file="fichier_iris.xlsx", sheetName="donnees_iris")# sheetName impose le nom du document dans le classeur
corr=round(cor(iris[,1:4]),3)
write.xlsx(corr, file="correlations_iris.xlsx", sheetName="correlations_iris")
cov= round(cov(iris[,1:4]),3)
write.xlsx(cov, file="covariances_iris.xlsx", sheetName="covariances_iris")
moyenne=round(apply(iris[,1:4],MARGIN=2,FUN=mean),3) # moyenne des colonnes,
write.xlsx(moyenne, file="moyennes_iris.xlsx", sheetName="moyennes_iris")
variance=round(apply(iris[,1:4],MARGIN=2,FUN=var),3)
write.xlsx(variance, file="variances_iris.xlsx", sheetName="donnees_iris")
centre_reduit=round(scale(iris[,1:4]),2)
write.xlsx(centre_reduit, file="centre_reduit_iris.xlsx", sheetName="donnees_centrees_reduites_iris")
moyenne2=round(apply(centre_reduit[,1:4],MARGIN=2,FUN=mean),3) # moyenne des colonnes,
write.xlsx(moyenne2, file="moyennes_centre_reduit_iris.xlsx", sheetName="moyennes_iris")
variance2=round(apply(iris[,1:4],MARGIN=2,FUN=mean),3)
write.xlsx(variance2, file="variances_centre_reduite_iris.xlsx", sheetName="donnees_iris")
res.PCA = PCA(iris[,1:4,], scale.unit = TRUE, ncp=4, graph=F)
# Obtenir l'inertie du premier plan factoriel
inertie_plan_factoriel <- get_eigenvalue(res.PCA)$eig[1]
# Afficher l'expression et la valeur de l'inertie du premier plan factoriel
print(paste("Inertie du premier plan factoriel:", inertie_plan_factoriel))
res.PCA = PCA(iris[,1:4,], scale.unit = TRUE, ncp=4, graph=F)
# Obtenir l'inertie du premier plan factoriel
inertie_plan_factoriel <- get_eigenvalue(res.PCA)$eig[1]
# Afficher l'expression et la valeur de l'inertie du premier plan factoriel
print(paste("Inertie du premier plan factoriel:", inertie_plan_factoriel))
fviz_eig(res.PCA)
fviz_pca_ind(res.PCA, select.ind = list(cos2 = 2))
result = PCA(X = iris, scale.unit = TRUE, ncp = 4, quali.sup = 5, graph = T)
View(result)
result$eig
library (ggplot2)
library (FactoMineR)
library (factoextra)
library (xlsx)
getwd() #affiche la localisation du répertoire de travail sous la forme d'un chemin absolu.
# setwd(dir="D:/2Travail/annee 2019-2020/cours analyse des donnees/mes_tp/2tp_iris acp "); getwd()
setwd(getwd())
data(iris)
write.xlsx(iris, file="fichier_iris.xlsx", sheetName="donnees_iris")# sheetName impose le nom du document dans le classeur
corr=round(cor(iris[,1:4]),3)
write.xlsx(corr, file="correlations_iris.xlsx", sheetName="correlations_iris")
cov= round(cov(iris[,1:4]),3)
write.xlsx(cov, file="covariances_iris.xlsx", sheetName="covariances_iris")
moyenne=round(apply(iris[,1:4],MARGIN=2,FUN=mean),3) # moyenne des colonnes,
write.xlsx(moyenne, file="moyennes_iris.xlsx", sheetName="moyennes_iris")
variance=round(apply(iris[,1:4],MARGIN=2,FUN=var),3)
write.xlsx(variance, file="variances_iris.xlsx", sheetName="donnees_iris")
centre_reduit=round(scale(iris[,1:4]),2)
write.xlsx(centre_reduit, file="centre_reduit_iris.xlsx", sheetName="donnees_centrees_reduites_iris")
moyenne2=round(apply(centre_reduit[,1:4],MARGIN=2,FUN=mean),3) # moyenne des colonnes,
write.xlsx(moyenne2, file="moyennes_centre_reduit_iris.xlsx", sheetName="moyennes_iris")
variance2=round(apply(iris[,1:4],MARGIN=2,FUN=mean),3)
write.xlsx(variance2, file="variances_centre_reduite_iris.xlsx", sheetName="donnees_iris")
res.PCA = PCA(iris[,1:4,], scale.unit = TRUE, ncp=4, graph=F)
plot.PCA(
res.PCA,
axes=c(1, 2),
choix="var" ,
habillage="cos2"
)
fviz_eig(res.PCA)
fviz_pca_ind(res.PCA, select.ind = list(cos2 = 2))
result = PCA(X = iris, scale.unit = TRUE, ncp = 4, quali.sup = 5, graph = T)
centre_reduit=round(scale(iris[,1:4]),2)
write.xlsx(centre_reduit, file="centre_reduit_iris.xlsx", sheetName="donnees_centrees_reduites_iris")
library (ggplot2)
library (FactoMineR)
library (factoextra)
library (xlsx)
getwd() #affiche la localisation du répertoire de travail sous la forme d'un chemin absolu.
# setwd(dir="D:/2Travail/annee 2019-2020/cours analyse des donnees/mes_tp/2tp_iris acp "); getwd()
setwd(getwd())
data(iris)
write.xlsx(iris, file="fichier_iris.xlsx", sheetName="donnees_iris")# sheetName impose le nom du document dans le classeur
corr=round(cor(iris[,1:4]),3)
write.xlsx(corr, file="correlations_iris.xlsx", sheetName="correlations_iris")
cov= round(cov(iris[,1:4]),3)
write.xlsx(cov, file="covariances_iris.xlsx", sheetName="covariances_iris")
moyenne=round(apply(iris[,1:4],MARGIN=2,FUN=mean),3) # moyenne des colonnes,
write.xlsx(moyenne, file="moyennes_iris.xlsx", sheetName="moyennes_iris")
variance=round(apply(iris[,1:4],MARGIN=2,FUN=var),3)
write.xlsx(variance, file="variances_iris.xlsx", sheetName="donnees_iris")
centre_reduit=round(scale(iris[,1:4]),2)
scale(iris[,1:4])
scale(iris[,1:4])[119]
scale(iris[,1:4])[119,]
abs(scale(iris[,1:4])[119,])
length(scale(iris[,1:4])[119,])
dist(scale(iris[,1:4])[119,])
moyenne2=round(apply(centre_reduit[,1:4],MARGIN=2,FUN=mean),3) # moyenne des colonnes,
distm(scale(iris[,1:4])[119,])
coordPoint119 = scale(iris[,1:4])[119,]
sqrt(coordPoint119[0]*coordPoint119[0] +
coordPoint119[1]*coordPoint119[1] +
coordPoint119[2]*coordPoint119[2] +
coordPoint119[3]*coordPoint119[3])
coordPoint119 = scale(iris[,1:4])[119,]
coordPoint119
sqrt(coordPoint119[0]*coordPoint119[0] +
coordPoint119[1]*coordPoint119[1] +
coordPoint119[2]*coordPoint119[2] +
coordPoint119[3]*coordPoint119[3])
coordPoint119 = scale(iris[,1:4])[119,]
coordPoint119
distance <- sqrt(sum(coordPoint119^2))
distance
coordPoint119 = scale(iris[,1:4])[119,]
coordPoint119
longueurAvantProjection <- sqrt(sum(coordPoint119^2))
longueurApresProjection <- res.PCA$ind$coord[,1]
longueurApresProjection
longueurApresProjection[119]
coordPoint119 = scale(iris[,1:4])[119,]
coordPoint119
longueurAvantProjection <- sqrt(sum(coordPoint119^2))
longueurApresProjection <- res.PCA$ind$coord[,1][119]
longueurAvantProjection                                          ]
longueurAvantProjection
longueurApresProjection
longueurAvantProjection / longueurApresProjection
longueurApresProjection / longueurAvantProjection
coordPoint119AvantProjection = scale(iris[,1:4])[119,]
coordPoint119AvantProjection
longueurAvantProjection <- sqrt(sum(coordPoint119^2))
longueurApresProjection <- res.PCA$ind$coord[,1][119]
longueurAvantProjection
longueurApresProjection
longueurApresProjection / longueurAvantProjection
sort(abs(res.PCA$ind$coord[,1]))
source("S:/Polytech/DI4/S8/Analyse de Données/Tps-Analyse-de-Donnees/script_stat.R")
sort(abs(res.PCA$ind$coord[,1]))
sort(abs(res.PCA$ind$coord[,2]))
distances = sqrt(sum(res.PCA$ind$coord[,1]^2, res.PCA$ind$coord[,2]^2))
distances
distances = (res.PCA$ind$coord[,1] + res.PCA$ind$coord[,2])
distances
distances = (res.PCA$ind$coord[,1]^2 + res.PCA$ind$coord[,2]^2)
distances
distances = (sqrt(res.PCA$ind$coord[,1]^2 + res.PCA$ind$coord[,2]^2))
sort(distances)
distances = (sqrt(res.PCA$ind$coord[,1]^2 + res.PCA$ind$coord[,2]^2))
sort(distances)
res.PCA$ind$coord[,1][122]
res.PCA$ind$coord[,1][122]
res.PCA$ind$coord[,1][118]
res.PCA$ind$coord[,1][118]
res.PCA$ind$coord[,1][122]
res.PCA$ind$coord[,2][122]
res.PCA$ind$coord[,1][118]
res.PCA$ind$coord[,2][118]
res.PCA$ind$coord[,3][122]
res.PCA$ind$coord[,4][122]
res.PCA$ind$coord[,1][118]
res.PCA$ind$coord[,2][118]
res.PCA$ind$coord[,3][122]
res.PCA$ind$coord[,0][122]
res.PCA$ind$coord[,1][122]
res.PCA$ind$coord[,2][122]
res.PCA$ind$coord[,3][122]
res.PCA$ind$coord[,4][122]
res.PCA$ind$coord[,1][118]
res.PCA$ind$coord[,2][118]
res.PCA$ind$coord[,3][122]
res.PCA$ind$coord[,4][122]
res.PCA$ind$coord[,1][122]
res.PCA$ind$coord[,2][122]
res.PCA$ind$coord[,3][122]
res.PCA$ind$coord[,4][122]
#COORD Point 122
res.PCA$ind$coord[,1][122]
res.PCA$ind$coord[,2][122]
res.PCA$ind$coord[,3][122]
res.PCA$ind$coord[,4][122]
#COORD Point 118
res.PCA$ind$coord[,1][118]
res.PCA$ind$coord[,2][118]
res.PCA$ind$coord[,3][118]
res.PCA$ind$coord[,4][118]
res.PCA$ind$coord[,5][122]
plot.PCA(
res.PCA,
axes=c(1, 2),
choix="ind" ,
habillage="cos2"
)
#COORD Point 118
res.PCA$ind$coord[,1][61]
res.PCA$ind$coord[,2][61]
res.PCA$ind$coord[,3][61]
res.PCA$ind$coord[,4][61]
#COORD Point 118
res.PCA$ind$coord[,1][42]
res.PCA$ind$coord[,2][42]
res.PCA$ind$coord[,3][42]
res.PCA$ind$coord[,4][42]
longueursApresProjection = (sqrt(res.PCA$ind$coord[,1]^2 + res.PCA$ind$coord[,2]^2))
sort(longueursApresProjection)
coordPoint118AvantProjection = scale(iris[,1:4])[118,]
coordPoint118AvantProjection
longueurAvantProjection <- sqrt(sum(coordPoint118^2))
longueurApresProjection <- longueursApresProjection[118]
longueurAvantProjection
longueurApresProjection
longueurApresProjection / longueurAvantProjection
coordPoint118AvantProjection = scale(iris[,1:4])[118,]
coordPoint118AvantProjection
longueurAvantProjection <- sqrt(sum(coordPoint118AvantProjection^2))
longueurApresProjection <- longueursApresProjection[118]
longueurAvantProjection
longueurApresProjection
longueurApresProjection / longueurAvantProjection
res.PCA$ind$coord[,1]
sort(res.PCA$ind$coord[,1])
longueursApresProjection = (sqrt(res.PCA$ind$coord[,1]^2 + res.PCA$ind$coord[,2]^2))
sort(abs(res.PCA$ind$coord[,1]))
sort(abs(res.PCA$ind$coord[,2]))
sort(abs(res.PCA$ind$coord[,3]))
sort(res.PCA$ind$coord[,1])
sort(res.PCA$ind$coord[,2])
sort(res.PCA$ind$coord[,2])
library (ggplot2)
library (FactoMineR)
library (factoextra)
library (xlsx)
getwd() #affiche la localisation du répertoire de travail sous la forme d'un chemin absolu.
# setwd(dir="D:/2Travail/annee 2019-2020/cours analyse des donnees/mes_tp/2tp_iris acp "); getwd()
setwd(getwd())
data(iris)
write.xlsx(iris, file="fichier_iris.xlsx", sheetName="donnees_iris")# sheetName impose le nom du document dans le classeur
corr=round(cor(iris[,1:4]),3)
write.xlsx(corr, file="correlations_iris.xlsx", sheetName="correlations_iris")
cov= round(cov(iris[,1:4]),3)
write.xlsx(cov, file="covariances_iris.xlsx", sheetName="covariances_iris")
moyenne=round(apply(iris[,1:4],MARGIN=2,FUN=mean),3) # moyenne des colonnes,
write.xlsx(moyenne, file="moyennes_iris.xlsx", sheetName="moyennes_iris")
variance=round(apply(iris[,1:4],MARGIN=2,FUN=var),3)
write.xlsx(variance, file="variances_iris.xlsx", sheetName="donnees_iris")
centre_reduit=round(scale(iris[,1:4]),2)
write.xlsx(centre_reduit, file="centre_reduit_iris.xlsx", sheetName="donnees_centrees_reduites_iris")
sort(res.PCA$ind$coord[,2])
coordPoint118AvantProjection = scale(iris[,1:4])[118,]
coordPoint118AvantProjection
longueurAvantProjection <- sqrt(sum(coordPoint118AvantProjection^2))
longueurApresProjection <- longueursApresProjection[118]
longueurAvantProjection
sort(res.PCA$ind$coord[,2])
res.PCA = PCA(iris[,1:4,], scale.unit = TRUE, ncp=4, graph=F)
sort(res.PCA$ind$coord[,2])
sort(iris$Sepal.Width)
iris
iris[
Sepal.Length ]
iris$Sepal.Width
iris$Sepal.Width[1,150]
iris$Sepal.Width[1:150]
iris_sepal_width <- iris[, c("Sepal.Width")]
iris_sepal_width$ID <- seq_len(nrow(iris))
iris_sepal_width
sort(iris_sepal_width)
# First, let's create the iris_sepal_width dataframe
iris_sepal_width <- iris[, c("Sepal.Width")]
iris_sepal_width$ID <- seq_len(nrow(iris))
# Now, let's sort the dataframe by the Sepal.Width column
sorted_iris_sepal_width <- iris_sepal_width[order(iris_sepal_width$Sepal.Width), ]
# Print the sorted dataframe
print(sorted_iris_sepal_width)
# First, let's create the iris_sepal_width dataframe
iris_sepal_width <- iris[, c("Sepal.Width")]
iris_sepal_width$ID <- seq_len(nrow(iris))
# Now, let's sort the dataframe by the Sepal.Width column
sorted_iris_sepal_width <- iris_sepal_width[order(iris_sepal_width[,1]), ]
# Print the sorted dataframe
sorted_iris_sepal_width
sort(iris$Sepal.Width)
sort(res.PCA$ind$coord[,3])
library (ggplot2)
library (FactoMineR)
library (factoextra)
library (xlsx)
getwd() #affiche la localisation du répertoire de travail sous la forme d'un chemin absolu.
install.packages("ggplot2")
install.packages("FactoMineR")
install.packages("factoextra")
install.packages("xlsx")
library (ggplot2)
library (FactoMineR)
library (factoextra)
library (xlsx)
getwd() #affiche la localisation du répertoire de travail sous la forme d'un chemin absolu.
# setwd(dir="D:/2Travail/annee 2019-2020/cours analyse des donnees/mes_tp/2tp_iris acp "); getwd()
setwd(getwd())
data(iris)
write.xlsx(iris, file="fichier_iris.xlsx", sheetName="donnees_iris")# sheetName impose le nom du document dans le classeur
corr=round(cor(iris[,1:4]),3)
write.xlsx(corr, file="correlations_iris.xlsx", sheetName="correlations_iris")
cov= round(cov(iris[,1:4]),3)
write.xlsx(cov, file="covariances_iris.xlsx", sheetName="covariances_iris")
moyenne=round(apply(iris[,1:4],MARGIN=2,FUN=mean),3) # moyenne des colonnes,
write.xlsx(moyenne, file="moyennes_iris.xlsx", sheetName="moyennes_iris")
variance=round(apply(iris[,1:4],MARGIN=2,FUN=var),3)
write.xlsx(variance, file="variances_iris.xlsx", sheetName="donnees_iris")
centre_reduit=round(scale(iris[,1:4]),2)
res.PCA = PCA(iris[,1:4,], scale.unit = TRUE, ncp=4, graph=F)
plot.PCA(
res.PCA,
axes=c(1, 2),
choix="var" ,
habillage="cos2"
)
fviz_eig(res.PCA)
fviz_pca_ind(res.PCA, select.ind = list(cos2 = 2))
result = PCA(X = iris, scale.unit = TRUE, ncp = 4, quali.sup = 5, graph = T)
fviz_eig(res.PCA, addlabels = TRUE, ylim = c(0, 50))
fviz_eig(res.PCA)
plot.PCA(
res.PCA,
axes=c(3),
choix="var" ,
habillage="cos2"
)
res.PCA = PCA(iris[,1:4,], scale.unit = TRUE, ncp=4, graph=F)
plot.PCA(
res.PCA,
axes=c(1, 2),
choix="var" ,
habillage="cos2"
)
plot.PCA(
res.PCA,
axes=c(3),
choix="var" ,
habillage="cos2"
)
plot.PCA(
res.PCA,
axes = c(3),
choix = "var",
habillage = "cos2"
)
plot.PCA(
res.PCA,
axes = c(1, 3), # Sélectionnez les axes 1 et 3
choix = "var",  # Sélectionnez "var" pour afficher les variables
habillage = "none" # Ne pas colorer les points en fonction d'une variable
)
plot.PCA(
res.PCA,
axes = c(1, 3), # Sélectionnez les axes 1 et 3
choix = "ind",  # Sélectionnez "var" pour afficher les variables
habillage = "none" # Ne pas colorer les points en fonction d'une variable
)
plot.PCA(
res.PCA,
axes = c(1, 3), # Sélectionnez les axes 1 et 3
choix = "ind",  # Sélectionnez "var" pour afficher les variables
habillage = "cos2" # Ne pas colorer les points en fonction d'une variable
)
plot.PCA(
res.PCA,
axes = c(1, 3), # Sélectionnez les axes 1 et 3
choix = "ind",  # Sélectionnez "ind" pour afficher les individus
habillage = "quali.sup" # Colorer les points en fonction de la variable qualitative
)
fviz_pca_var(res.PCA)
# Utiliser des points et textes
fviz_pca_var(res.PCA, geom = c("point", "text"))
# Changer la couleur et le thÃ¨me
fviz_pca_var(res.PCA, col.var="steelblue")+  theme_minimal()
# ContrÃ´ler la couleur selon la contribution
fviz_pca_var(res.PCA, col.var="contrib")+ scale_color_gradient2(low="white", mid="blue", high="red", midpoint=96, space ="Lab") + theme_minimal()
# ContrÃ´ler la transparence des variables
# selon leurs contributions
fviz_pca_var(res.PCA, alpha.var="contrib") +  theme_minimal()
# SÃ©lectionner et visualiser les variables avec cos2 >= 0.96
fviz_pca_var(res.PCA, select.var = list(cos2 = 0.96))
# SÃ©lectionner le top 3 selon la contribution
fviz_pca_var(res.PCA, select.var = list(contrib = 3))
# SÃ©lectionner par noms
fviz_pca_var(res.PCA,  select.var= list(name = c("Sepal.Width", "Petal.Length")))
# Changer le titre principal et celui des axes. InspirÃ© de l'article: STHDA fviz_pca_ Visualisation de l'Analyse en Composante Principale - Logiciel R et analyse de donnÃ©es
fviz_pca_ind(res.PCA) + labs(title ="PCA", x = "PC1", y = "PC2")
# Changer les limites des axes en spÃ©cifiant le min et le max
fviz_pca_ind(res.PCA) +  xlim(-4, 4) + ylim (-4, 4)
# Utiliser seulement du texte
fviz_pca_ind(res.PCA, geom="text")
# Utiliser uniquement des points
fviz_pca_ind(res.PCA, geom="point")
# Changer la taille des points
fviz_pca_ind(res.PCA, geom="point", pointsize = 4)
# Changer la couleur des points et le thÃ¨me
fviz_pca_ind(res.PCA, col.ind = "blue")+  theme_minimal()
# ContrÃ´ler automatiquement la couleurs des individus par les valeurs de cos2 ou de contributions cos2 = qualitÃ© de rÃ©prÃ©sentation sur le graphique
fviz_pca_ind(res.PCA, col.ind="cos2")
# Gradient de couleur
fviz_pca_ind(res.PCA, col.ind="cos2") +  scale_color_gradient2(low="white", mid="blue",high="red", midpoint=0.6, space = "Lab")
# Changer le thÃ¨me et utiliser uniquement des points
fviz_pca_ind(res.PCA, col.ind="cos2", geom = "point") + scale_color_gradient2(low="white", mid="blue",high="red", midpoint=0.6, space = "Lab")+ theme_minimal()
# Colorer en fonction de la contribution
fviz_pca_ind(res.PCA, col.ind="contrib") + scale_color_gradient2(low="white", mid="blue",high="red", midpoint=4, space ="Lab")
# ContrÃ´ler la transparence des couleurs
# en fonction de la contribution
fviz_pca_ind(res.PCA, alpha.ind="contrib") +  theme_minimal()
# Colorer les individus par groupes
fviz_pca_ind(res.PCA, label="none", habillage=iris$Species)
# Changer la taille des points
fviz_pca_ind(res.PCA, geom="point", pointsize = 4)
# Changer la couleur des points et le thÃ¨me
fviz_pca_ind(res.PCA, col.ind = "blue")+  theme_minimal()
# ContrÃ´ler automatiquement la couleurs des individus par les valeurs de cos2 ou de contributions cos2 = qualitÃ© de rÃ©prÃ©sentation sur le graphique
fviz_pca_ind(res.PCA, col.ind="cos2")
# Gradient de couleur
fviz_pca_ind(res.PCA, col.ind="cos2") +  scale_color_gradient2(low="white", mid="blue",high="red", midpoint=0.6, space = "Lab")
# Changer le thÃ¨me et utiliser uniquement des points
fviz_pca_ind(res.PCA, col.ind="cos2", geom = "point") + scale_color_gradient2(low="white", mid="blue",high="red", midpoint=0.6, space = "Lab")+ theme_minimal()
# Colorer en fonction de la contribution
fviz_pca_ind(res.PCA, col.ind="contrib") + scale_color_gradient2(low="white", mid="blue",high="red", midpoint=4, space ="Lab")
# ContrÃ´ler la transparence des couleurs
# en fonction de la contribution
fviz_pca_ind(res.PCA, alpha.ind="contrib") +  theme_minimal()
# Colorer les individus par groupes
fviz_pca_ind(res.PCA, label="none", habillage=iris$Species)
plot.PCA(
res.PCA,
axes = c(1, 3), # Sélectionnez les axes 1 et 3
choix = "ind",  # Sélectionnez "ind" pour afficher les individus
habillage = iris$Species # Colorer les points en fonction de la variable qualitative
)
fviz_pca_ind(res.PCA, axes = c(1, 3), label="none", habillage=iris$Species)
fviz_pca_ind(res.PCA, axes = c(1,2), label="none", habillage=iris$Species)
for (i in 1:nrow(iris)) {
coordPointAvantProjection <- scale(iris[i, 1:4])
longueurAvantProjection <- sqrt(sum(coordPointAvantProjection^2))
longueursAvantProjection[i] <- longueurAvantProjection
}
longueursAvantProjection <- numeric(length = nrow(iris))
for (i in 1:nrow(iris)) {
coordPointAvantProjection <- scale(iris[i, 1:4])
longueurAvantProjection <- sqrt(sum(coordPointAvantProjection^2))
longueursAvantProjection[i] <- longueurAvantProjection
}
longueursAvantProjection
# Remplacer les valeurs manquantes par la moyenne des autres valeurs dans la même colonne
iris_no_missing <- na.omit(iris)
longueursAvantProjection <- numeric(length = nrow(iris_no_missing))
# Créer un vecteur vide pour stocker les longueurs avant projection
longueursAvantProjection <- numeric(length = nrow(iris_no_missing))
for (i in 1:nrow(iris)) {
coordPointAvantProjection <- scale(iris[i, 1:4])
longueurAvantProjection <- sqrt(sum(coordPointAvantProjection^2))
longueursAvantProjection[i] <- longueurAvantProjection
}
longueursAvantProjection
pca_coords <- as.data.frame(res.PCA$ind$coord)
# Get the standard deviations of the original variables
original_std_dev <- apply(iris[, 1:4], 2, sd)
# Multiply PCA coordinates by standard deviations
scaled_pca_coords <- sweep(pca_coords, 2, original_std_dev, "*")
# Calculate Euclidean distance from the origin (0,0)
initial_lengths <- sqrt(rowSums(scaled_pca_coords^2))
# Display initial lengths
head(initial_lengths)
coord_PC1 <- as.data.frame(res.PCA$ind$coord[, "Dim.1", drop = FALSE])
coord_PC1
qual_ind_PC1 <- dimdesc(res.PCA, axes = 1, proba = 0.05)
# Afficher les indices de qualité
print(qual_ind_PC1)
cos2_PC1 <- res.PCA$ind$cos2[,1]
cos2_PC1
cos2_PC1 <- res.PCA$ind$cos2[,1]
# Calculer la longueur de chaque individu à l'origine dans le nuage initial
ind_len <- apply(res.PCA$ind$coord, 1, function(x) sqrt(sum(x^2)))
# Calculer l'indice de qualité (cos2 / ind_len^2) sur PC1 pour chaque individu
quality_index_PC1 <- cos2_PC1 / ind_len^2
# Afficher les indices de qualité
print(quality_index_PC1)
View(res.PCA)
View(res.PCA)
sort(cos2_PC)
sort(cos2_PC1)
sort(res.PCA$ind$cos2[,1])
sort(res.PCA$ind$cos2[,2])
sort(res.PCA$ind$cos2[,3])
